@page "/login"
@layout LoginLayout
@using ArtistPortfolio.Admin.Services
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Giriş - Admin Panel</PageTitle>

<div class="login-card">
    <div class="login-header">
        <h2>
            <i class="fas fa-user-shield me-2"></i>
            Admin Panel
        </h2>
        <p class="text-muted">Lütfen giriş bilgilerinizi giriniz</p>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i>
            @errorMessage
        </div>
    }

    <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        
        <div class="form-floating mb-3">
            <InputText id="email" 
                      class="form-control" 
                      @bind-Value="loginModel.Email" 
                      placeholder="E-posta adresiniz" />
            <label for="email">
                <i class="fas fa-envelope me-2"></i>E-posta
            </label>
            <ValidationMessage For="@(() => loginModel.Email)" class="text-danger small mt-1" />
        </div>

        <div class="form-floating mb-3">
            <InputText id="password" 
                      type="password" 
                      class="form-control" 
                      @bind-Value="loginModel.Password" 
                      placeholder="Şifreniz" />
            <label for="password">
                <i class="fas fa-lock me-2"></i>Şifre
            </label>
            <ValidationMessage For="@(() => loginModel.Password)" class="text-danger small mt-1" />
        </div>

        <div class="form-check mb-3">
            <InputCheckbox id="rememberMe" class="form-check-input" @bind-Value="loginModel.RememberMe" />
            <label class="form-check-label" for="rememberMe">
                Beni hatırla
            </label>
        </div>

        <div class="d-grid">
            <button type="submit" class="btn btn-primary btn-login" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="loading-spinner me-2"></span>
                    <span>Giriş yapılıyor...</span>
                }
                else
                {
                    <i class="fas fa-sign-in-alt me-2"></i>
                    <span>Giriş Yap</span>
                }
            </button>
        </div>
    </EditForm>

    <div class="back-to-website">
        <a href="/" target="_blank">
            <i class="fas fa-globe me-1"></i>
            Website'ye Dön
        </a>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;
    private string errorMessage = "";
    private bool hasRendered = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            hasRendered = true;
            
            // Eğer kullanıcı zaten giriş yapmışsa dashboard'a yönlendir
            try
            {
                var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
                if (!string.IsNullOrEmpty(token))
                {
                    Navigation.NavigateTo("/", true);
                }
            }
            catch (Exception)
            {
                // JavaScript interop hatası durumunda sessizce devam et
            }
        }
    }

    private async Task HandleLogin()
    {
        if (!hasRendered) return;
        
        isLoading = true;
        errorMessage = "";
        StateHasChanged();

        try
        {
            var result = await AuthService.LoginAsync(loginModel.Email, loginModel.Password);
            
            if (result.Success)
            {
                // Token'ı localStorage'a kaydet
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", result.Token);
                
                // Dashboard'a yönlendir
                Navigation.NavigateTo("/", true);
            }
            else
            {
                errorMessage = result.Message ?? "Giriş başarısız. Lütfen bilgilerinizi kontrol edin.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Bir hata oluştu. Lütfen tekrar deneyin.";
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "E-posta adresi gereklidir.")]
        [EmailAddress(ErrorMessage = "Geçerli bir e-posta adresi giriniz.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Şifre gereklidir.")]
        [MinLength(6, ErrorMessage = "Şifre en az 6 karakter olmalıdır.")]
        public string Password { get; set; } = "";

        public bool RememberMe { get; set; } = false;
    }
}
