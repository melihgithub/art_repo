@page "/iletisim"
@using System.ComponentModel.DataAnnotations
@inject IToastService toastService
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject HttpClient Http
@using ArtistPortfolio.Shared.Models
@inject NavigationManager NavigationManager
@using ArtistPortfolio.Web.Services
@using Microsoft.AspNetCore.Components.Forms

<PageTitle>Contact</PageTitle>

<h1>Contact</h1>

<p>Please use this form to contact me.</p>

<EditForm Model="@contactMessage" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Name</label>
        <InputText id="name" class="form-control" @bind-value="contactMessage.Name" />
        <ValidationMessage For="@(() => contactMessage.Name)" />
    </div>

    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" type="email" class="form-control" @bind-value="contactMessage.Email" />
        <ValidationMessage For="@(() => contactMessage.Email)" />
    </div>

    <div class="form-group">
        <label for="phone">Phone (Optional)</label>
        <InputText id="phone" class="form-control" @bind-value="contactMessage.Phone" />
        <ValidationMessage For="@(() => contactMessage.Phone)" />
    </div>

    <div class="form-group">
        <label for="subject">Subject</label>
        <InputText id="subject" class="form-control" @bind-value="contactMessage.Subject" />
        <ValidationMessage For="@(() => contactMessage.Subject)" />
    </div>

    <div class="form-group">
        <label for="message">Message</label>
        <InputTextArea id="message" class="form-control" rows="5" @bind-value="contactMessage.Message" />
        <ValidationMessage For="@(() => contactMessage.Message)" />
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    private ContactMessage contactMessage = new ContactMessage();

    private async Task HandleValidSubmit()
    {
        try
        {
            var apiUrl = Configuration["ApiSettings:BaseUrl"] + "/api/Contact";

            var response = await Http.PostAsJsonAsync(apiUrl, contactMessage);

            if (response.IsSuccessStatusCode)
            {
                toastService.ShowSuccess("Message sent successfully!", "Success");
                contactMessage = new ContactMessage(); // Clear the form
                NavigationManager.NavigateTo("/"); // Redirect to home page
            }
            else
            {
                toastService.ShowError($"Failed to send message. Status code: {response.StatusCode}", "Error");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"An error occurred: {ex.Message}", "Error");
        }
    }

    public class ContactMessage
    {
        [Required(ErrorMessage = "Name is required.")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; }

        public string Phone { get; set; }

        [Required(ErrorMessage = "Subject is required.")]
        public string Subject { get; set; }

        [Required(ErrorMessage = "Message is required.")]
        public string Message { get; set; }
    }
}